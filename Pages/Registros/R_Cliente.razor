@page "/R_Clientes"
@page "/R_Clientes/{ClienteId:int}"

@inject ClienteBLL clienteBLL
@inject NotificationService notification
@inject IJSRuntime js
@inject SweetAlertService Swal

<EditForm Model="@cliente" OnValidSubmit="@Guardar">
    <NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation" />
    <RadzenCard Class="shadow border border-3" Style="animation: slideInLeft 0.5s; animation-delay: 0.1s;">
        <RadzenCard Class="shadow border border-3" Style="animation: slideInLeft 0.5s; animation-delay: 0.1s;">
            <h3 class="text-center" Style="animation: slideInLeft 0.5s; animation-delay: 0.1s;">Formulario de Clientes
            </h3>
        </RadzenCard>
        <RadzenCard Class="shadow border border-3" Style="animation: slideInLeft 0.5s; animation-delay: 0.1s;">
            <div class="row" Style="animation: slideInLeft 0.5s; animation-delay: 0.2s;">
                <div class="col-md-6">
                    <RadzenLabel Text="Nombre del cliente:" />
                    <RadzenTextBox @bind-Value="cliente.Nombre" aria-required="true"
                        Class="rounded-pill custom-animation" />
                </div>
                <div class="col-md-6">
                    <RadzenLabel Text="Dirección:" />
                    <RadzenTextBox @bind-Value="cliente.Direccion" aria-required="true"
                        Class="rounded-pill custom-animation" />
                </div>
            </div>
            <br />
            <div class="row" Style="animation: slideInLeft 0.5s; animation-delay: 0.2s;">
                <div class="col-md-11">
                    <div class="d-flex justify-content-center">
                        <RadzenLabel Text="Lugar de trabajo:" />
                        <RadzenTextBox @bind-Value="cliente.LugarTrabajo" aria-required="true"
                            Class="rounded-pill custom-animation" />
                    </div>
                </div>
            </div>
            <br />
            <div class="row" Style="animation: slideInLeft 0.5s; animation-delay: 0.2s;">
                <div class="col-md-6">
                    <RadzenLabel Text="Número de teléfono:" />
                    <RadzenTextBox @bind-Value="cliente.Telefono" Placeholder="Número de teléfono"
                        Class="rounded-pill custom-animation" />
                    <RadzenRequiredValidator Text="El número de teléfono es obligatorio" Component="cliente.Telefono" />
                </div>
                <div class="col-md-6">
                    <RadzenLabel Text="Fecha:" />
                    <RadzenDatePicker @bind-Value="cliente.Fecha_Registro" aria-required="true"
                        Class="rounded-pill custom-animation" />
                </div>
            </div>
            <br />
            <div class="card-footer d-flex justify-content-center">
                <div class="form-group text-left" style="display: inline-block;">
                    <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo" title="Nuevo cliente">
                        <span class="oi oi-file"> Nuevo</span>
                    </button>
                    <button type="submit" class="btn btn-lg btn-success" title="Guardar cliente">
                        <span class="oi oi-document"> Guardar</span>
                    </button>
                    <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar" title="Eliminar cliente">
                        <span class="oi oi-trash"> Eliminar</span>
                    </button>
                </div>
            </div>
        </RadzenCard>
    </RadzenCard>
</EditForm>

@code {

    [Parameter]
    public int ClienteId { get; set; }

    private Cliente cliente = new Cliente();
    public List<Cliente> lista { get; set; } = new List<Cliente>();

    protected async override Task OnInitializedAsync()
    {
        if (ClienteId > 0)
        {
            cliente.ClienteId = ClienteId;
            await Buscar();
        }
    }
    async Task Buscar()
    {
        var encontrado = clienteBLL.Buscar(cliente.ClienteId);
        try
        {
            if (encontrado != null)
            {
                cliente = encontrado;
                this.cliente = encontrado;
                var resultado = await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Accion completada",
                        Text = "La informacion se busco correctamente",
                        Icon = SweetAlertIcon.Success,
                        ShowCancelButton = false,
                    });
            }
            else if (string.IsNullOrEmpty(cliente.Telefono) && string.IsNullOrEmpty(cliente.Direccion) &&
            string.IsNullOrEmpty(cliente.LugarTrabajo))
            {
                var resultado = await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Accion no completada",
                        Text = "La informacion no pudo encontrar",
                        Icon = SweetAlertIcon.Error,
                        ShowCancelButton = false,
                    });
            }
        }
        catch (Exception ex) { }
    }
    async Task Nuevo()
    {
        try
        {
            if (!string.IsNullOrEmpty(cliente.Telefono) && !string.IsNullOrEmpty(cliente.Direccion) &&
            !string.IsNullOrEmpty(cliente.LugarTrabajo))
            {
                this.cliente = new Cliente();
                await js.MostrarMensaje("Nuevo archivo creado correctamente", "La accion fue realizada correctamente",
                TipoMensajeSweetAlert.success);
            }
            else
            {
                var resultado = await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Accion no completada",
                        Text = "No se pudo realizar una lamina nueva",
                        Icon = SweetAlertIcon.Error,
                        ShowCancelButton = false,
                    });
            }
        }
        catch (Exception ex)
        {
            // Manejar la excepción de manera adecuada
        }
    }

    async Task Guardar()
    {
        if (string.IsNullOrEmpty(cliente.Telefono) && string.IsNullOrEmpty(cliente.Direccion) &&
        string.IsNullOrEmpty(cliente.LugarTrabajo))
        {
            var resultado = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Accion no completada",
                    Text = "La informacion se pudo guardar correctamente",
                    Icon = SweetAlertIcon.Error,
                    ShowCancelButton = false,
                });
        }
        else if (!string.IsNullOrEmpty(cliente.Telefono) && !string.IsNullOrEmpty(cliente.Direccion) &&
        !string.IsNullOrEmpty(cliente.LugarTrabajo))
        {
            await Nuevo();
            var resultado = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Accion completada",
                    Text = "La informacion se guardo correctamente",
                    Icon = SweetAlertIcon.Success,
                    ShowCancelButton = false,
                });
            clienteBLL.Guardar(cliente);
        }

    }
    async Task Eliminar()
    {
        try
        {
            if (clienteBLL.Eliminar(cliente.ClienteId))
            {
                Nuevo();
                var resultado = await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Accion completada",
                        Text = "La informacion se elimino correctamente",
                        Icon = SweetAlertIcon.Success,
                        ShowCancelButton = false,
                    });

            }
            else if (string.IsNullOrEmpty(cliente.Telefono) && string.IsNullOrEmpty(cliente.Direccion) &&
            string.IsNullOrEmpty(cliente.LugarTrabajo))
            {
                var resultado = await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Accion no completada",
                        Text = "La informacion no se elimino correctamente",
                        Icon = SweetAlertIcon.Error,
                        ShowCancelButton = false,
                    });
            }
        }
        catch (Exception ex) { }
    }

    //Metodo para verificar si el usuario guardo antes de cambiar de paginado
    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        int camposCompletos = 0;

        if (!string.IsNullOrEmpty(cliente.Nombre))
            camposCompletos++;
        if (!string.IsNullOrEmpty(cliente.Direccion))
            camposCompletos++;
        if (!string.IsNullOrEmpty(cliente.LugarTrabajo))
            camposCompletos++;
        if (!string.IsNullOrEmpty(cliente.Telefono))
            camposCompletos++;
        if (cliente.Fecha_Registro != null)
            camposCompletos++;

        if (camposCompletos > 1)
        {
            var resultado = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Confirmación",
                    Text = "¿Deseas abandonar la página y perder los cambios?",
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Sí, quiero salir",
                    CancelButtonText = "No, quiero quedarme"
                });

            var confirmado = !string.IsNullOrEmpty(resultado.Value);

            if (!confirmado)
            {
                context.PreventNavigation();
            }
        }
    }

}
