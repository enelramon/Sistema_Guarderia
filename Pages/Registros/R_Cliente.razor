@page "/R_Clientes"
@page "/R_Clientes/{ClienteId:int}"

@inject ClienteBLL clienteBLL
@inject NotificationService notification
@inject IJSRuntime js
@inject SweetAlertService Swal

<RadzenForm Model="@cliente" Submit="@Guardar">

    <NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation" />
    <RadzenCard Class="shadow border border-3" Style="animation: slideInLeft 0.5s; animation-delay: 0.1s;">
        <RadzenCard Class="shadow border border-3" Style="animation: slideInLeft 0.5s; animation-delay: 0.1s;">
            <h3 class="text-center" Style="animation: slideInLeft 0.5s; animation-delay: 0.1s;">Formulario de Clientes
            </h3>
        </RadzenCard>
        <RadzenCard Class="shadow border border-3" Style="animation: slideInLeft 0.5s; animation-delay: 0.1s;">
            <div class="row" Style="animation: slideInLeft 0.5s; animation-delay: 0.2s;">
                <div class="col-md-6">
                    <RadzenLabel Text="Nombre del cliente:" />
                    <RadzenTextBox @bind-Value="cliente.Nombre" Class="rounded-pill custom-animation" />
                    <RadzenRequiredValidator Text="El nombre del cliente es requerido" Component="cliente.Nombre" />
                </div>
                <div class="col-md-6">
                    <RadzenLabel Text="Dirección:" />
                    <RadzenTextBox @bind-Value="cliente.Direccion" Class="rounded-pill custom-animation" />
                    <RadzenRequiredValidator Text="La dirección es obligatoria" Component="cliente.Direccion" />
                </div>
            </div>
            <br />
            <div class="row" Style="animation: slideInLeft 0.5s; animation-delay: 0.2s;">
                <div class="col-md-11">
                    <div class="d-flex justify-content-center">
                        <RadzenLabel Text="Lugar de trabajo:" />
                        <RadzenTextBox @bind-Value="cliente.LugarTrabajo" Class="rounded-pill custom-animation" />
                        <RadzenRequiredValidator Text="El lugar de trabajo es obligatorio"
                            Component="cliente.LugarTrabajo" />
                    </div>
                </div>
            </div>
            <br />
            <div class="row" Style="animation: slideInLeft 0.5s; animation-delay: 0.2s;">
                <div class="col-md-6">
                    <RadzenLabel Text="Número de teléfono:" />
                    <RadzenTextBox @bind-Value="cliente.Telefono" Placeholder="Número de teléfono"
                        Class="rounded-pill custom-animation" />
                    <RadzenRequiredValidator Text="El número de teléfono es obligatorio" Component="cliente.Telefono" />
                </div>
                <div class="col-md-6">
                    <RadzenLabel Text="Fecha:" />
                    <RadzenDatePicker @bind-Value="cliente.Fecha_Registro" Class="rounded-pill custom-animation" />
                    <RadzenRequiredValidator Text="La fecha de registro es obligatoria"
                        Component="cliente.Fecha_Registro" />
                </div>
            </div>
            <br />
            <div class="card-footer d-flex justify-content-center">
                <div class="form-group text-left" style="display: inline-block;">
                    <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo" title="Nuevo cliente">
                        <span class="oi oi-file"> Nuevo</span>
                    </button>
                    <button type="submit" class="btn btn-lg btn-success" title="Guardar cliente">
                        <span class="oi oi-document"> Guardar</span>
                    </button>
                    <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar" title="Eliminar cliente">
                        <span class="oi oi-trash"> Eliminar</span>
                    </button>
                </div>
            </div>
        </RadzenCard>
    </RadzenCard>
</RadzenForm>

@code {

    [Parameter]
    public int ClienteId { get; set; }

    private string Mensaje { get; set; }

    private Cliente cliente = new Cliente();
    public List<Cliente> lista { get; set; } = new List<Cliente>();

    protected override void OnInitialized()
    {
        if (ClienteId > 0)
        {
            cliente.ClienteId = ClienteId;
            Buscar();
        }
    }
    void Buscar()
    {
        var encontrado = clienteBLL.Buscar(cliente.ClienteId);
        if (encontrado != null)
        {
            cliente = encontrado;
            this.cliente = encontrado;

        }
        else
        {

        }
    }
    void Nuevo()
    {
        this.cliente = new Cliente();
        //Nuevas notificaciones
        js.MostrarMensaje("Nuevo archivo creado correctamente", "La accion fue realizada correctamente",
        TipoMensajeSweetAlert.success);
    }
    async Task Guardar()
    {
        bool guardo = clienteBLL.Guardar(cliente);
        Mensaje = "¿En verdad desear guardar los cambios?";

        if (guardo)
        {
            Nuevo();
        }

    }
    void Eliminar()
    {
        if (clienteBLL.Eliminar(cliente.ClienteId))
        {
            Nuevo();

        }
        else if (cliente.ClienteId == 0)
        {

        }
    }

    //Metodo para verificar si el usuario guardo antes de cambiar de paginado
    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        if (cliente.ClienteId > 0 || !string.IsNullOrEmpty(cliente.Nombre) || !string.IsNullOrEmpty(cliente.Direccion) ||
        !string.IsNullOrEmpty(cliente.LugarTrabajo) || !string.IsNullOrEmpty(cliente.Telefono) || cliente.Fecha_Registro !=
        null)
        {
            var resultado = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Confirmación",
                    Text = "¿Deseas abandonar la página y perder los cambios?",
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Sí, quiero salir",
                    CancelButtonText = "No, quiero quedarme"
                });

            var confirmado = !string.IsNullOrEmpty(resultado.Value);

            if (!confirmado)
            {
                context.PreventNavigation();
            }
        }
    }
}
